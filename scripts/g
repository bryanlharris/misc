#! /usr/bin/gawk --exec

# ~/.neoconfig
# 
# |<--beginning of the line is here, i.e. does not start w/space
#
# [pmp]
#     user = pmpnerd
#     pass = ommitted
#     host = passman
#     port = 2345
#     data = passtrix


BEGIN \
{
    if((ARGV[1] == "") && (ENVIRON["C"] == "")) {
        printf "usage: g string1 string2 string3, type --help for more information.\n"
        exit
    } else if(ARGV[1] == "--help") {
        printf "\nG: Search the passman database with nicely formatted results.\n\n"
        printf "Latest version available here: http://git.bryanslack/misc.git\n"
        printf "To get the whole repository: git clone git://git.bryanslack/srv/git/misc.git\n\n"
        printf "Notes:\n"
        printf "* If the environment variable $C exists, it is used as a search term:\n\n"
        printf "(shell) export C=penton\n"
        printf "(shell) g lvs\n"
        printf "(output) Linux   NULL       lvs1                           66.111.104.82    Penton-LF\n"
        printf "(output) Linux   NULL       lvs2                           66.111.104.83    Penton-LF\n\n"
        printf "* If the environment variable $O exists, it is used as a search term:\n\n"
        printf "(shell) export C=penton O=windows\n"
        printf "(shell) g | wc -l\n"
        printf "(output) 38\n"
        printf "* Searches the ~/.neoconfig file for user, pass, host, port, and the database name.\n"
        printf "* Email bharris for write access to the repository.\n"
        exit
    } else if(ARGV[1] == "-t") {
        tickers=1
    }

    RS = "\n\\["; FS = " "
    neoconfig=ENVIRON["HOME"] "/.neoconfig"
    while((getline < neoconfig) >0)
    {
        if(tolower($0) ~ /pmp/)
        {
            stanza = $0
            sub(/pmp]\n/, "", stanza)
            RS = "\n"; FS = " = "
            user = $0; sub(/.*user = /, "", user); sub(/\n.*/, "", user)
            pass = $0; sub(/.*pass = /, "", pass); sub(/\n.*/, "", pass)
            host = $0; sub(/.*host = /, "", host); sub(/\n.*/, "", host)
            port = $0; sub(/.*port = /, "", port); sub(/\n.*/, "", port)
            data = $0; sub(/.*data = /, "", data); sub(/\n.*/, "", data)
            RS = "\n"; FS = " "
            break
        }
    }

    cmd="mysql -N -u" user " -p"pass" -h"host" -P"port " " data
    print "select rs.operatingsystem, r.column_char2, r.column_char4, r.ipaddress, r.column_char3 from ptrx_resource r left join ptrx_resourcesystemmembers rsm on r.resourceid = rsm.resourceid left join ptrx_resourcesystem rs on rsm.osid = rs.osid where concat_ws(' ', rs.operatingsystem, r.column_char2, r.column_char4, r.ipaddress, r.column_char3) regexp '.'"|&cmd
    close(cmd,"to")
    while((cmd|&getline)>0)
    {
        r["id"]=count++
        r["os"]=$1
        r["ticker"]=$2
        r["name"]=$3
        r["addr"]=$4
        r["customer"]=$5 " " $6 " " $7

        if(ARGV[1] != "-t")
            if((tolower($0) ~ tolower(ENVIRON["O"])) && (tolower($0) ~ tolower(ENVIRON["C"])) && (tolower($0) ~ tolower(ARGV[1])) && (tolower($0) ~ tolower(ARGV[2])) && (tolower($0) ~ tolower(ARGV[3])))
            {
                printf "%-08s", r["os"]
                printf "%-11s", r["ticker"]
                printf "%-31s", r["name"]
                printf "%-17s", r["addr"]
                printf "%s\n",  r["customer"]
            }
        a[$2]++
    }
    close(cmd)

    if(tickers)
    {
        i = 1
        for (b in a)
            t[i++] = b
        n = asort(t)
        for(i = 1; i <= n; i++)
            if((t[i] !~ /[a-z]+/) && (t[i] !~ /[.]/) && (t[i] !~ /[-]/) && (t[i] !~ /^$/))
                printf "%s%c", t[i], "\0x00"
    }
}
