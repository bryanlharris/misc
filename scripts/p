#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

package require Expect

set user                [exec whoami]
set prompt              ".*(%|\\\$|#) "
set timeout             -1
array set badhosts      {}
set send_slow           {1 .01}
set sshargs             [list -t -2 -4 -a -x -p 22]
lappend sshargs         -o StrictHostKeyChecking=no
lappend sshargs         -o PasswordAuthentication=yes
lappend sshargs         -o PubkeyAuthentication=no
lappend sshargs         -o ConnectTimeout=1
set hosts               [list invalid]
set usage               [format "%s %s" "Usage: $::argv0" \
                         {[ -design ] [ -qa ] [ -prod ] [ -all ] (you must choose one)}]

exp_version -exit 5.0
expect_before -i $user_spawn_id \003 exit
trap exit SIGINT

proc send {arg} {
  sleep .1
  exp_send -s -- $arg
}

if {!([llength $::argv] == 1)} {
  puts $usage
} elseif {[lindex $::argv 0] eq "-design"} {
  set hosts               [list design1 design2]
} elseif {[lindex $::argv 0] eq "-qa"} {
  set hosts               [list qa1 qa2]
} elseif {[lindex $::argv 0] eq "-prod"} {
  set hosts               [list prod1 prod2]
} elseif {[lindex $::argv 0] eq "-all"} {
  set hosts               [list design1 design2 qa1 qa2 prod1 prod2]
} else {
  puts $usage
}

if {$hosts == "invalid"} {
  puts "Something went wrong, exiting"
  exit 1
}

stty -echo
send_user "Old password: "
expect_user -re "(.*)\n"
send_user "\n"
set password(old) $expect_out(1,string)
send_user "New password: "
expect_user -re "(.*)\n"
send_user "\n"
set password(new) $expect_out(1,string)
stty echo

foreach host $hosts {
  set sshcmd [concat "ssh " [join $sshargs " "] -l $user $host]
  set pid [spawn {*}$sshcmd]
  
  set logged_in 0
  expect "$user@$host's password:" {
    send "$password(old)\r"
    expect -re "$prompt" {
      set logged_in 1
    } -re {Permission denied([^\r\n])*} {
      set badhosts($host) $expect_out(0,string)
      exec kill $pid
      expect eof
    }
  } timeout {
    set badhosts($host) "timeout"
    exec kill $pid
    expect eof
  } eof {
    set badhosts($host) "unexpected eof"
    exec kill $pid
  }
  if (!$logged_in) {
    wait
    continue
  }
  
  send "passwd\r"
  expect "Changing password for user $user."
  expect "Changing password for $user."
  expect -re {\(current\) UNIX password:([^\r\n])*}
  send "$password(old)\r"
  expect -re "New password:.*" {
    send "$password(new)\r"
    expect -re "Retype new password:.*" {
      send "$password(new)\r"
      expect -re {([^\r\n])*passwd([^\r\n])*success([^\r\n])*} {
        set goodhosts($host) $expect_out(0,string)
        expect -re "$prompt" {
          send_user "\n"
        }
        close
        wait
      } -nocase -re {BAD PASSWORD:([^\r\n])*} {
        set badhosts($host) $expect_out(0,string)
        continue
      } -re {(([^\r\n])*)\r\npasswd: Authentication token manipulation error} {
        set badhosts($host) $expect_out(1,string)
        continue
      }
    } -nocase -re {BAD PASSWORD:([^\r\n])*} {
      set badhosts($host) $expect_out(0,string)
      continue
    } -re {(([^\r\n])*)\r\npasswd: Authentication token manipulation error} {
      set badhosts($host) $expect_out(0,string)
      continue
    }
  } -nocase -re {([^\r\n])*error([^\r\n])*} {
    set badhosts($host) $expect_out(0,string)
    continue
  } timeout {
    set badhosts($host) "timeout"
    continue
  }
}

send_user "\n\n"
if {[array size goodhosts] > 0} {
  foreach {host message} [array get goodhosts] {
    send_user [format "Successfully changed: %-13s  (%s)\n" $host $message]
  }
}
if {[array size badhosts] > 0} {
  foreach {host message} [array get badhosts] {
    send_user [format "Failed to set password on: %-13s  (%s)\n" $host $message]
  }
}

send_user "\n\nALL DONE\n\n"

















