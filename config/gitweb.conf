$GIT = "/usr/bin/git";
$projectroot = "/srv/git";

$stylesheet = "/gitweb.css";
$logo = "/git-logo.png";
$favicon = "/git-favicon.png";
$site_name = "bryanslack Git Trees";

# URL formatting.  You can use this to make pretty URLs if you like.  I am
# doing this using Apache rewrite rules (covered later in this guide), and
# so am not using these settings.
#$my_uri = "http://git.hokietux.net/";
#$home_link = $my_uri;

# Base URL for project trees.  This is used to prefix each of the Git trees
# on the webpages.  So in my case, if you were viewing a Git tree called
# 'foo.git', the webpage would tell you that the tree was located at:
# 'ssh://git@hokietux.net:1123/foo.git'. Note that escaping the '@'
# character is necessary to render the URL properly.
# @git_base_url_list = ("git://git.bryanslack");
# @git_base_url_list = ("ssh://git\@hokietux.net:1123");
@git_base_url_list = ("git://git.bryanslack/srv/git");

# Length of the project description column in the webpage.
$projects_list_description_width = 50;

# Only export repos we are allowing to be publically cloned.  What this setting
# actually says is that if the given file _exists_ in the git repository, then
# the tree can be exported to the web.  So, for example, the file:
# /srv/git/repositories/configs.git/git-daemon-export-ok file exists, so
# configs.git will be exported via Gitweb.  This file can be created with a
# simple '$ touch git-daemon-export-ok'.  I am using this filename as it doubles
# for the same use with the Git export daemon.  If this setting does not exist,
# then all trees will be exported by default.  Note that there ARE other methods
# for controlling which trees get exported. This is just the one I prefer.
# $export_ok = "git-daemon-export-ok";
# I don't like this --Bryan Harris

# Enable PATH_INFO so the server can produce URLs of the
# form: http://git.hokietux.net/project.git/xxx/xxx
# This allows for pretty URLs *within* the Git repository, where
# my Apache rewrite rules are not active.
$feature{'pathinfo'}{'default'} = [1];

# Enable blame, pickaxe search, snapshop, search, and grep
# support, but still allow individual projects to turn them off.
# These are features that users can use to interact with your Git trees. They
# consume some CPU whenever a user uses them, so you can turn them off if you
# need to.  Note that the 'override' option means that you can override the
# setting on a per-repository basis.
$feature{'blame'}{'default'} = [1];
$feature{'blame'}{'override'} = [1];

$feature{'pickaxe'}{'default'} = [1];
$feature{'pickaxe'}{'override'} = [1];

$feature{'snapshot'}{'default'} = [1];
$feature{'snapshot'}{'override'} = [1];

$feature{'search'}{'default'} = [1];

$feature{'grep'}{'default'} = [1];
$feature{'grep'}{'override'} = [1];
